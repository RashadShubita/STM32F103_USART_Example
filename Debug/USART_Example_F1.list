
USART_Example_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080015e4  080015e4  000115e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080016cc  080016cc  000116cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080016d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001bc  20000014  080016e8  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200001d0  080016e8  000201d0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   000037dd  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000bb9  00000000  00000000  0002381a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000218  00000000  00000000  000243d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000245f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001548  00000000  00000000  000247a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001070  00000000  00000000  00025cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00026d60  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000744  00000000  00000000  00026ddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080015cc 	.word	0x080015cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080015cc 	.word	0x080015cc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__aeabi_d2uiz>:
 80008e0:	004a      	lsls	r2, r1, #1
 80008e2:	d211      	bcs.n	8000908 <__aeabi_d2uiz+0x28>
 80008e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008e8:	d211      	bcs.n	800090e <__aeabi_d2uiz+0x2e>
 80008ea:	d50d      	bpl.n	8000908 <__aeabi_d2uiz+0x28>
 80008ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f4:	d40e      	bmi.n	8000914 <__aeabi_d2uiz+0x34>
 80008f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000902:	fa23 f002 	lsr.w	r0, r3, r2
 8000906:	4770      	bx	lr
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	4770      	bx	lr
 800090e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000912:	d102      	bne.n	800091a <__aeabi_d2uiz+0x3a>
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	4770      	bx	lr
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	4770      	bx	lr

08000920 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da0b      	bge.n	800094c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000934:	490d      	ldr	r1, [pc, #52]	; (800096c <NVIC_SetPriority+0x4c>)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 030f 	and.w	r3, r3, #15
 800093c:	3b04      	subs	r3, #4
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800094a:	e009      	b.n	8000960 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800094c:	4908      	ldr	r1, [pc, #32]	; (8000970 <NVIC_SetPriority+0x50>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	e000e100 	.word	0xe000e100

08000974 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000982:	d301      	bcc.n	8000988 <SysTick_Config+0x14>
 8000984:	2301      	movs	r3, #1
 8000986:	e011      	b.n	80009ac <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <SysTick_Config+0x40>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000990:	3b01      	subs	r3, #1
 8000992:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000994:	210f      	movs	r1, #15
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	f7ff ffc1 	bl	8000920 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SysTick_Config+0x40>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <SysTick_Config+0x40>)
 80009a6:	2207      	movs	r2, #7
 80009a8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <SysTick_Delay>:
 * @note    SysTick will be update with IRQ callback
 * @param   Waiting time in milliseconds
 * @retval  None
 */
void SysTick_Delay(uint32_t wait_time_ms)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Store start tick */
  uint32_t startTick = SysTickCounter;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <SysTick_Delay+0x28>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]

  /* Loop until timeout */
  while((SysTickCounter - startTick) < wait_time_ms)
 80009c6:	bf00      	nop
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SysTick_Delay+0x28>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d3f8      	bcc.n	80009c8 <SysTick_Delay+0x10>
  {

  }
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	20000030 	.word	0x20000030

080009e4 <SysTick_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void SysTick_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  uint32_t returnCode;

  /* Update clock configuration */
  SystemCoreClockUpdate();
 80009ea:	f000 fcb1 	bl	8001350 <SystemCoreClockUpdate>

  /* Check clock configuration */
  if(SystemCoreClock != (uint32_t) 8000000)
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <SysTick_Init+0x44>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <SysTick_Init+0x48>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d000      	beq.n	80009fa <SysTick_Init+0x16>
  {
    /* Clock configuration is not OK */
    while(1)
 80009f8:	e7fe      	b.n	80009f8 <SysTick_Init+0x14>
  {
    /* Clock configuration is OK */
  }

  /* Configure SysTick to generate an interrupt every millisecond */
  returnCode = SysTick_Config(SystemCoreClock / 1000);
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <SysTick_Init+0x44>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <SysTick_Init+0x4c>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	099b      	lsrs	r3, r3, #6
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ffb4 	bl	8000974 <SysTick_Config>
 8000a0c:	6078      	str	r0, [r7, #4]

  /* Check return code for errors */
  if (returnCode != 0)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d000      	beq.n	8000a16 <SysTick_Init+0x32>
  {
    /* SysTick configuration failed */
    while(1)
 8000a14:	e7fe      	b.n	8000a14 <SysTick_Init+0x30>
  }
  else
  {
    /* Do nothing, SysTick configuration OK */
  }
  NVIC_SetPriority(SysTick_IRQn,  0);
 8000a16:	2100      	movs	r1, #0
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ff80 	bl	8000920 <NVIC_SetPriority>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	007a1200 	.word	0x007a1200
 8000a30:	10624dd3 	.word	0x10624dd3

08000a34 <GPIO_OnBoard_Init_LED>:
 * @note    Yellow_LED -> PC13
 * @param   None
 * @retval  None
 */
void GPIO_OnBoard_Init_LED(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
 /* Enable clock for GPIOC */
    RCC ->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000a38:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <GPIO_OnBoard_Init_LED+0x48>)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <GPIO_OnBoard_Init_LED+0x48>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6193      	str	r3, [r2, #24]
 /* Configure PC.13 in output mode, max speed 2 MHz. */
    GPIOC ->CRH &= ~GPIO_CRH_MODE13;
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <GPIO_OnBoard_Init_LED+0x4c>)
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <GPIO_OnBoard_Init_LED+0x4c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000a4e:	6053      	str	r3, [r2, #4]
    GPIOC ->CRH |=  GPIO_CRH_MODE13_1;
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <GPIO_OnBoard_Init_LED+0x4c>)
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <GPIO_OnBoard_Init_LED+0x4c>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5a:	6053      	str	r3, [r2, #4]
 /* Configure PC.13 as  general purpose output push-pull */
    GPIOC ->CRH  &= ~GPIO_CRH_CNF13;
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <GPIO_OnBoard_Init_LED+0x4c>)
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <GPIO_OnBoard_Init_LED+0x4c>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a66:	6053      	str	r3, [r2, #4]
 /* Led OFF */
    GPIOC ->ODR  |= GPIO_ODR_ODR13;
 8000a68:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <GPIO_OnBoard_Init_LED+0x4c>)
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <GPIO_OnBoard_Init_LED+0x4c>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a72:	60d3      	str	r3, [r2, #12]

}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40011000 	.word	0x40011000

08000a84 <NVIC_SetPriorityGrouping>:
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EnableIRQ>:
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <NVIC_EnableIRQ+0x2c>)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	095b      	lsrs	r3, r3, #5
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	f002 021f 	and.w	r2, r2, #31
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100

08000afc <NVIC_SetPriority>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da0b      	bge.n	8000b28 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b10:	490d      	ldr	r1, [pc, #52]	; (8000b48 <NVIC_SetPriority+0x4c>)
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 030f 	and.w	r3, r3, #15
 8000b18:	3b04      	subs	r3, #4
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	761a      	strb	r2, [r3, #24]
}
 8000b26:	e009      	b.n	8000b3c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000b28:	4908      	ldr	r1, [pc, #32]	; (8000b4c <NVIC_SetPriority+0x50>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <NVIC_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void NVIC_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	  /* Set priority group to 3
	   * bits[3:0] are the sub-priority,
	   * bits[7:4] are the pre-empt priority */

	  NVIC_SetPriorityGrouping(3);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f7ff ff95 	bl	8000a84 <NVIC_SetPriorityGrouping>

	  /* Set priority levels */
	  NVIC_SetPriority(EXTI0_IRQn, 1);
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	2006      	movs	r0, #6
 8000b5e:	f7ff ffcd 	bl	8000afc <NVIC_SetPriority>
	  NVIC_SetPriority(DMA1_Channel3_IRQn, 2);
 8000b62:	2102      	movs	r1, #2
 8000b64:	200d      	movs	r0, #13
 8000b66:	f7ff ffc9 	bl	8000afc <NVIC_SetPriority>
	  NVIC_SetPriority(USART1_IRQn,1);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2025      	movs	r0, #37	; 0x25
 8000b6e:	f7ff ffc5 	bl	8000afc <NVIC_SetPriority>

	  /* Enable interrupts at NVIC */
	  NVIC_EnableIRQ(EXTI0_IRQn);
 8000b72:	2006      	movs	r0, #6
 8000b74:	f7ff ffaa 	bl	8000acc <NVIC_EnableIRQ>
	  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b78:	200d      	movs	r0, #13
 8000b7a:	f7ff ffa7 	bl	8000acc <NVIC_EnableIRQ>
	  NVIC_EnableIRQ(USART1_IRQn);
 8000b7e:	2025      	movs	r0, #37	; 0x25
 8000b80:	f7ff ffa4 	bl	8000acc <NVIC_EnableIRQ>


}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <strCmp>:
 * @param   str1, str2, size
 * @retval  strCmpReturnType
 */
static strCmpReturnType strCmp(const char * str1, const char * str2,
    const uint8_t size)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	4613      	mov	r3, r2
 8000b94:	71fb      	strb	r3, [r7, #7]
  /* Compare status */
  strCmpReturnType cmpStatus = STR_EQUAL;
 8000b96:	2301      	movs	r3, #1
 8000b98:	75fb      	strb	r3, [r7, #23]

  /* Check null pointers */
  if((NULL != str1) && (NULL != str2))
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d018      	beq.n	8000bd2 <strCmp+0x4a>
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d015      	beq.n	8000bd2 <strCmp+0x4a>
  {
    /* Start comparing */
    for (int idx = 0; idx < size; idx++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	e00e      	b.n	8000bca <strCmp+0x42>
    {
      /* When not equal set the return status */
      if(str1[idx] != str2[idx])
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	440b      	add	r3, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d001      	beq.n	8000bc4 <strCmp+0x3c>
      {
        cmpStatus = STR_NOT_EQUAL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]
    for (int idx = 0; idx < size; idx++)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	dcec      	bgt.n	8000bac <strCmp+0x24>
  }
  else
  {
    /* Null pointers, do nothing */
  }
  return cmpStatus;
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	371c      	adds	r7, #28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
	...

08000be0 <USART1_IRQ_Callback>:
 * @note
 * @param   None
 * @retval  None
 */
void USART1_IRQ_Callback(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* Check if parity error detected */
  if((USART1->SR & USART_SR_PE) == USART_SR_PE)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <USART1_IRQ_Callback+0x54>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d10c      	bne.n	8000c0c <USART1_IRQ_Callback+0x2c>
  {
    while((USART1->SR & USART_SR_RXNE) != USART_SR_RXNE)
 8000bf2:	bf00      	nop
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <USART1_IRQ_Callback+0x54>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	f003 0320 	and.w	r3, r3, #32
 8000bfe:	2b20      	cmp	r3, #32
 8000c00:	d1f8      	bne.n	8000bf4 <USART1_IRQ_Callback+0x14>
    {
      /* Wait for RXNE flag to be set */
    }

    /* Read data register to clear parity error */
    USART1->DR;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <USART1_IRQ_Callback+0x54>)
 8000c04:	889b      	ldrh	r3, [r3, #4]

    /* Set parity error */
    currentIRQStatus = USART1_PARITY_ERROR;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <USART1_IRQ_Callback+0x58>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	701a      	strb	r2, [r3, #0]
  {
    /* No parity error */
  }

  /* Check USART receiver */
  if((USART1->SR & USART_SR_RXNE) == USART_SR_RXNE)
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <USART1_IRQ_Callback+0x54>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	f003 0320 	and.w	r3, r3, #32
 8000c16:	2b20      	cmp	r3, #32
 8000c18:	d108      	bne.n	8000c2c <USART1_IRQ_Callback+0x4c>
  {
    /* Read character */
    RxChar = USART1->DR;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <USART1_IRQ_Callback+0x54>)
 8000c1c:	889b      	ldrh	r3, [r3, #4]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <USART1_IRQ_Callback+0x5c>)
 8000c24:	701a      	strb	r2, [r3, #0]

    /* Set IRQ status */
    currentIRQStatus = USART1_CHAR_RECEIVED;
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <USART1_IRQ_Callback+0x58>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* No new data received */
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40013800 	.word	0x40013800
 8000c38:	20000035 	.word	0x20000035
 8000c3c:	20000036 	.word	0x20000036

08000c40 <strReceive>:
 * @note
 * @param   None
 * @retval  None
 */
static void strReceive(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0

  /* Current reception index */
  static int RxIndex = 0;

  /* Check for end-of-line condition */
  if (RxChar == '\0')
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <strReceive+0x8c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d127      	bne.n	8000c9e <strReceive+0x5e>
  {
    /* Check if string data was received before */
    if (RxIndex != 0)
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <strReceive+0x90>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d035      	beq.n	8000cc2 <strReceive+0x82>
    {
      /* Copy string data from local buffer */
      for(int idx = 0; idx < RxIndex; idx++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e00b      	b.n	8000c74 <strReceive+0x34>
      {
        RxBuffer[idx] = RxLocalBuffer[idx];
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <strReceive+0x94>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	7819      	ldrb	r1, [r3, #0]
 8000c64:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <strReceive+0x98>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	460a      	mov	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
      for(int idx = 0; idx < RxIndex; idx++)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3301      	adds	r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <strReceive+0x90>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dbee      	blt.n	8000c5c <strReceive+0x1c>
      }

      /* Add terminating NULL at the end */
      RxBuffer[RxIndex] = 0;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <strReceive+0x90>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <strReceive+0x98>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	54d1      	strb	r1, [r2, r3]

      /* Set message length */
      RxMessageLength = RxIndex + 1;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <strReceive+0x90>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <strReceive+0x9c>)
 8000c94:	701a      	strb	r2, [r3, #0]

      /* Reset current index */
      RxIndex = 0;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <strReceive+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
    RxLocalBuffer[RxIndex] = RxChar;

    /* Increment current index for the next char reception */
    RxIndex++;
  }
}
 8000c9c:	e011      	b.n	8000cc2 <strReceive+0x82>
    if (MAX_BUFFER_LENGTH == RxIndex)
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <strReceive+0x90>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2bc8      	cmp	r3, #200	; 0xc8
 8000ca4:	d102      	bne.n	8000cac <strReceive+0x6c>
      RxIndex = 0;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <strReceive+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
    RxLocalBuffer[RxIndex] = RxChar;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <strReceive+0x90>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <strReceive+0x8c>)
 8000cb2:	7811      	ldrb	r1, [r2, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <strReceive+0x94>)
 8000cb6:	54d1      	strb	r1, [r2, r3]
    RxIndex++;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <strReceive+0x90>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <strReceive+0x90>)
 8000cc0:	6013      	str	r3, [r2, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	20000036 	.word	0x20000036
 8000cd0:	20000104 	.word	0x20000104
 8000cd4:	20000108 	.word	0x20000108
 8000cd8:	20000038 	.word	0x20000038
 8000cdc:	20000101 	.word	0x20000101

08000ce0 <strTransmit>:
 * @note
 * @param   str, size
 * @retval  None
 */
void strTransmit(const char * str, uint8_t size)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
  /* Check null pointers */
  if(NULL != str)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d018      	beq.n	8000d24 <strTransmit+0x44>
  {
    /* Send all string characters */
    for(int idx = 0; idx < size; idx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e011      	b.n	8000d1c <strTransmit+0x3c>
    {
      /* Check USART status register */
      while(!(USART1->SR & USART_SR_TXE))
 8000cf8:	bf00      	nop
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <strTransmit+0x50>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f8      	beq.n	8000cfa <strTransmit+0x1a>
      {
        /* Wait for transmission buffer empty flag */
      }

      /* Write data into transmit data register */
      USART1->DR = str[idx];
 8000d08:	4909      	ldr	r1, [pc, #36]	; (8000d30 <strTransmit+0x50>)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	808b      	strh	r3, [r1, #4]
    for(int idx = 0; idx < size; idx++)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	78fa      	ldrb	r2, [r7, #3]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dce9      	bgt.n	8000cf8 <strTransmit+0x18>
  }
  else
  {
    /* Null pointers, do nothing */
  }
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40013800 	.word	0x40013800

08000d34 <USART1_GPIO_Init>:
 * @note    PA9 -> USART1_TX, PA10 -> USART1_RX
 * @param   None
 * @retval  None
 */
void USART1_GPIO_Init(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
 /* GPIOA clock enable */
  	RCC ->APB2ENR   |= RCC_APB2ENR_IOPAEN;
 8000d38:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <USART1_GPIO_Init+0x6c>)
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <USART1_GPIO_Init+0x6c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6193      	str	r3, [r2, #24]

 /* PA9 TX: Output mode, max speed 2 MHz. */
	GPIOA ->CRH     &= ~GPIO_CRH_MODE9;
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d4e:	6053      	str	r3, [r2, #4]
	GPIOA ->CRH     |=  GPIO_CRH_MODE9_1;
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f043 0320 	orr.w	r3, r3, #32
 8000d5a:	6053      	str	r3, [r2, #4]

 /* PA9 TX: Alternate function output Push-pull */
  	GPIOA ->CRH     &= ~GPIO_CRH_CNF9;
 8000d5c:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d66:	6053      	str	r3, [r2, #4]
    GPIOA ->CRH     |=  GPIO_CRH_CNF9_1;
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d72:	6053      	str	r3, [r2, #4]

 /* PA10 RX: Floating input */
  	GPIOA ->CRH     &= ~GPIO_CRH_CNF10;
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d7e:	6053      	str	r3, [r2, #4]
    GPIOA ->CRH     |=  GPIO_CRH_CNF10_0;
 8000d80:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8a:	6053      	str	r3, [r2, #4]

 /* PA10 RX: Input mode */
  	GPIOA ->CRH     &= ~GPIO_CRH_MODE10;
 8000d8c:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <USART1_GPIO_Init+0x70>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d96:	6053      	str	r3, [r2, #4]

}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010800 	.word	0x40010800

08000da8 <Cal_USART_BRR_Val>:
 * @param   Baud_Rate:    Desired Baud Rate value
 *          F_CK:         Input clock to the peripheral in Hz
 * @retval  Value of BRR
 */
uint16_t Cal_USART_BRR_Val(uint32_t Baud_Rate, uint32_t F_CK)
{
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	 double USARTDIV=0;
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	f04f 0400 	mov.w	r4, #0
 8000dba:	e9c7 3404 	strd	r3, r4, [r7, #16]
	    * DIV_Fraction = 16 * 0.0625 = 1 = 0x1
	    * DIV_Mantissa = 39 = 0x27
	    *
	    * BRR          = 0x271 */

	  USARTDIV    = ( F_CK/(Baud_Rate*16.0) );
 8000dbe:	6838      	ldr	r0, [r7, #0]
 8000dc0:	f7ff fb06 	bl	80003d0 <__aeabi_ui2d>
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460d      	mov	r5, r1
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fb01 	bl	80003d0 <__aeabi_ui2d>
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <Cal_USART_BRR_Val+0xd4>)
 8000dd4:	f7ff fb72 	bl	80004bc <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4620      	mov	r0, r4
 8000dde:	4629      	mov	r1, r5
 8000de0:	f7ff fc96 	bl	8000710 <__aeabi_ddiv>
 8000de4:	4603      	mov	r3, r0
 8000de6:	460c      	mov	r4, r1
 8000de8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  Fraction = round( (USARTDIV - ((uint16_t)USARTDIV) )* 16 ) ;
 8000dec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000df0:	f7ff fd76 	bl	80008e0 <__aeabi_d2uiz>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff faf9 	bl	80003f0 <__aeabi_i2d>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460c      	mov	r4, r1
 8000e02:	461a      	mov	r2, r3
 8000e04:	4623      	mov	r3, r4
 8000e06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e0a:	f7ff f9a3 	bl	8000154 <__aeabi_dsub>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460c      	mov	r4, r1
 8000e12:	4618      	mov	r0, r3
 8000e14:	4621      	mov	r1, r4
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <Cal_USART_BRR_Val+0xd4>)
 8000e1c:	f7ff fb4e 	bl	80004bc <__aeabi_dmul>
 8000e20:	4603      	mov	r3, r0
 8000e22:	460c      	mov	r4, r1
 8000e24:	4618      	mov	r0, r3
 8000e26:	4621      	mov	r1, r4
 8000e28:	f000 fb8a 	bl	8001540 <round>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	460c      	mov	r4, r1
 8000e30:	4618      	mov	r0, r3
 8000e32:	4621      	mov	r1, r4
 8000e34:	f7ff fd54 	bl	80008e0 <__aeabi_d2uiz>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]
	  if(Fraction > 15)
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	d90c      	bls.n	8000e5c <Cal_USART_BRR_Val+0xb4>
		 {
		    Fraction=0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]
		    USARTDIV++;
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <Cal_USART_BRR_Val+0xd8>)
 8000e4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e50:	f7ff f982 	bl	8000158 <__adddf3>
 8000e54:	4603      	mov	r3, r0
 8000e56:	460c      	mov	r4, r1
 8000e58:	e9c7 3404 	strd	r3, r4, [r7, #16]
		 }
	  return ( ( ((uint16_t)USARTDIV) << 4 ) + Fraction) ;
 8000e5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e60:	f7ff fd3e 	bl	80008e0 <__aeabi_d2uiz>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	b29b      	uxth	r3, r3
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7c:	40300000 	.word	0x40300000
 8000e80:	3ff00000 	.word	0x3ff00000

08000e84 <USART1_Init>:
 * @note    None
 * @param   BRR_Val:     Can be calculated using Cal_USART_BRR_Val function
 * @retval  None
 */
void USART1_Init(uint16_t BRR_Val)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]

/* USART GPIO configuration -------------------------------------------------------*/

  /* Configuration GPIOA TX & RX based on Reference manual Table 24 & Table 54	*/
	USART1_GPIO_Init();
 8000e8e:	f7ff ff51 	bl	8000d34 <USART1_GPIO_Init>

/* USART configuration -------------------------------------------------------*/
   /*Enable USART1 clock */
   RCC ->APB2ENR   |=  RCC_APB2ENR_USART1EN;
 8000e92:	4a18      	ldr	r2, [pc, #96]	; (8000ef4 <USART1_Init+0x70>)
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <USART1_Init+0x70>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6193      	str	r3, [r2, #24]

   /* select 1 Start bit, 9 Data bits, n Stop bit  */
   USART1 ->CR1    |= USART_CR1_M;
 8000e9e:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <USART1_Init+0x74>)
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <USART1_Init+0x74>)
 8000ea2:	899b      	ldrh	r3, [r3, #12]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	8193      	strh	r3, [r2, #12]

   /* STOP bits, 00: 1 Stop bit */
   USART1->CR2    &= ~USART_CR2_STOP;
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <USART1_Init+0x74>)
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <USART1_Init+0x74>)
 8000eb2:	8a1b      	ldrh	r3, [r3, #16]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	8213      	strh	r3, [r2, #16]

   /* Select odd parity */
   USART1->CR1 |= USART_CR1_PS;
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <USART1_Init+0x74>)
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <USART1_Init+0x74>)
 8000ec2:	899b      	ldrh	r3, [r3, #12]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	8193      	strh	r3, [r2, #12]

   /* Enable parity control */
   USART1->CR1 |= USART_CR1_PCE;
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <USART1_Init+0x74>)
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <USART1_Init+0x74>)
 8000ed2:	899b      	ldrh	r3, [r3, #12]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	8193      	strh	r3, [r2, #12]

   /* Set Baud Rate */
   USART1->BRR = BRR_Val;
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <USART1_Init+0x74>)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	8113      	strh	r3, [r2, #8]

	__ASM("NOP");
 8000ee4:	bf00      	nop
	__ASM("NOP");
 8000ee6:	bf00      	nop
	__ASM("NOP");
 8000ee8:	bf00      	nop
	__ASM("NOP");
 8000eea:	bf00      	nop

}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40013800 	.word	0x40013800

08000efc <USART_Enable>:
 * @note
 * @param   USARTx ,where x=1 ..3
 * @retval  None
 */
void USART_Enable(USART_TypeDef *USARTx)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Enable USART1 */
  USARTx->CR1 |= USART_CR1_UE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	899b      	ldrh	r3, [r3, #12]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	819a      	strh	r2, [r3, #12]

  /* Enable transmitter */
  USARTx->CR1 |= USART_CR1_TE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	899b      	ldrh	r3, [r3, #12]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	819a      	strh	r2, [r3, #12]

  /* Enable receiver */
  USARTx->CR1 |= USART_CR1_RE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	899b      	ldrh	r3, [r3, #12]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	819a      	strh	r2, [r3, #12]

  /* Enable reception buffer not empty flag interrupt */
  USARTx->CR1 |= USART_CR1_RXNEIE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	899b      	ldrh	r3, [r3, #12]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f043 0320 	orr.w	r3, r3, #32
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	819a      	strh	r2, [r3, #12]

  /* Enable parity error interrupt */
  USARTx->CR1 |= USART_CR1_PEIE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	899b      	ldrh	r3, [r3, #12]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	819a      	strh	r2, [r3, #12]

}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
	...

08000f60 <USART1_Process>:
 * @note
 * @param   None
 * @retval  None
 */
void USART1_Process(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  /* Check error status */
  switch (currentIRQStatus)
 8000f66:	4b69      	ldr	r3, [pc, #420]	; (800110c <USART1_Process+0x1ac>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d00f      	beq.n	8000f8e <USART1_Process+0x2e>
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d002      	beq.n	8000f78 <USART1_Process+0x18>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d011      	beq.n	8000f9a <USART1_Process+0x3a>

    case USART1_NO_IRQ:
      break;

    default:
      break;
 8000f76:	e011      	b.n	8000f9c <USART1_Process+0x3c>
    	strTransmit(parity_error, sizeof(parity_error));
 8000f78:	210d      	movs	r1, #13
 8000f7a:	4865      	ldr	r0, [pc, #404]	; (8001110 <USART1_Process+0x1b0>)
 8000f7c:	f7ff feb0 	bl	8000ce0 <strTransmit>
      currentState = USART1_IDLE;
 8000f80:	4b64      	ldr	r3, [pc, #400]	; (8001114 <USART1_Process+0x1b4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
      currentIRQStatus = USART1_NO_IRQ;
 8000f86:	4b61      	ldr	r3, [pc, #388]	; (800110c <USART1_Process+0x1ac>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
      break;
 8000f8c:	e006      	b.n	8000f9c <USART1_Process+0x3c>
      strReceive();
 8000f8e:	f7ff fe57 	bl	8000c40 <strReceive>
      currentIRQStatus = USART1_NO_IRQ;
 8000f92:	4b5e      	ldr	r3, [pc, #376]	; (800110c <USART1_Process+0x1ac>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
      break;
 8000f98:	e000      	b.n	8000f9c <USART1_Process+0x3c>
      break;
 8000f9a:	bf00      	nop
  }

  /* Check current USART state */
  switch (currentState)
 8000f9c:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <USART1_Process+0x1b4>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	f200 80a8 	bhi.w	80010f6 <USART1_Process+0x196>
 8000fa6:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <USART1_Process+0x4c>)
 8000fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fac:	08000fc1 	.word	0x08000fc1
 8000fb0:	08000fd1 	.word	0x08000fd1
 8000fb4:	08000fe9 	.word	0x08000fe9
 8000fb8:	08000ff9 	.word	0x08000ff9
 8000fbc:	08001033 	.word	0x08001033
  {
    case USART1_IDLE:
      /* Transmit data */
      strTransmit(hello_world, sizeof(hello_world));
 8000fc0:	210d      	movs	r1, #13
 8000fc2:	4855      	ldr	r0, [pc, #340]	; (8001118 <USART1_Process+0x1b8>)
 8000fc4:	f7ff fe8c 	bl	8000ce0 <strTransmit>

      /* Go to next state */
      currentState = USART1_WAIT_FOR_RESPONCE;
 8000fc8:	4b52      	ldr	r3, [pc, #328]	; (8001114 <USART1_Process+0x1b4>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
      break;
 8000fce:	e099      	b.n	8001104 <USART1_Process+0x1a4>

    case USART1_WAIT_FOR_RESPONCE:
      /* Check if new message received */
      if(0 != RxMessageLength)
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <USART1_Process+0x1bc>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 8090 	beq.w	80010fa <USART1_Process+0x19a>
      {
        /* Reset message length */
        RxMessageLength = 0;
 8000fda:	4b50      	ldr	r3, [pc, #320]	; (800111c <USART1_Process+0x1bc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]

        /* Go to next state */
        currentState = USART1_ASK_FOR_NAME;
 8000fe0:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <USART1_Process+0x1b4>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        /* Nothing received yet */
      }
      break;
 8000fe6:	e088      	b.n	80010fa <USART1_Process+0x19a>

    case USART1_ASK_FOR_NAME:
      /* Transmit data */
      strTransmit(ask_for_name, sizeof(ask_for_name));
 8000fe8:	2113      	movs	r1, #19
 8000fea:	484d      	ldr	r0, [pc, #308]	; (8001120 <USART1_Process+0x1c0>)
 8000fec:	f7ff fe78 	bl	8000ce0 <strTransmit>

      /* Go to next state */
      currentState = USART1_WAIT_FOR_NAME;
 8000ff0:	4b48      	ldr	r3, [pc, #288]	; (8001114 <USART1_Process+0x1b4>)
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	701a      	strb	r2, [r3, #0]
      break;
 8000ff6:	e085      	b.n	8001104 <USART1_Process+0x1a4>

    case USART1_WAIT_FOR_NAME:
      /* Check if new message received */
      if(0 != RxMessageLength)
 8000ff8:	4b48      	ldr	r3, [pc, #288]	; (800111c <USART1_Process+0x1bc>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d07e      	beq.n	80010fe <USART1_Process+0x19e>
      {
        /* Transmit data */
          strTransmit(hi, sizeof(hi));
 8001000:	2104      	movs	r1, #4
 8001002:	4848      	ldr	r0, [pc, #288]	; (8001124 <USART1_Process+0x1c4>)
 8001004:	f7ff fe6c 	bl	8000ce0 <strTransmit>
          strTransmit(RxBuffer, RxMessageLength);
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <USART1_Process+0x1bc>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	4846      	ldr	r0, [pc, #280]	; (8001128 <USART1_Process+0x1c8>)
 8001010:	f7ff fe66 	bl	8000ce0 <strTransmit>
          strTransmit(ask_for_command, sizeof(ask_for_command));
 8001014:	2115      	movs	r1, #21
 8001016:	4845      	ldr	r0, [pc, #276]	; (800112c <USART1_Process+0x1cc>)
 8001018:	f7ff fe62 	bl	8000ce0 <strTransmit>
          strTransmit(ask_for_command_ex, sizeof(ask_for_command_ex));
 800101c:	2134      	movs	r1, #52	; 0x34
 800101e:	4844      	ldr	r0, [pc, #272]	; (8001130 <USART1_Process+0x1d0>)
 8001020:	f7ff fe5e 	bl	8000ce0 <strTransmit>

        /* Reset message length */
        RxMessageLength = 0;
 8001024:	4b3d      	ldr	r3, [pc, #244]	; (800111c <USART1_Process+0x1bc>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]

        /* Go to next state */
        currentState = USART1_WAIT_FOR_COMMAND;
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <USART1_Process+0x1b4>)
 800102c:	2204      	movs	r2, #4
 800102e:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        /* Nothing received yet */
      }
      break;
 8001030:	e065      	b.n	80010fe <USART1_Process+0x19e>

    case USART1_WAIT_FOR_COMMAND:
      /* Check if new message received */
      if(0 != RxMessageLength)
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <USART1_Process+0x1bc>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d063      	beq.n	8001102 <USART1_Process+0x1a2>
      {
        /* Reset message length */
        RxMessageLength = 0;
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <USART1_Process+0x1bc>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]

        /* String compare results */
        strCmpReturnType isMatch_01 = STR_NOT_EQUAL;
 8001040:	2300      	movs	r3, #0
 8001042:	713b      	strb	r3, [r7, #4]
        strCmpReturnType isMatch_02 = STR_NOT_EQUAL;
 8001044:	2300      	movs	r3, #0
 8001046:	71fb      	strb	r3, [r7, #7]
        strCmpReturnType isMatch_03 = STR_NOT_EQUAL;
 8001048:	2300      	movs	r3, #0
 800104a:	71bb      	strb	r3, [r7, #6]
        strCmpReturnType isMatch_04 = STR_NOT_EQUAL;
 800104c:	2300      	movs	r3, #0
 800104e:	717b      	strb	r3, [r7, #5]

        /* Compare with turn on green led command */
        isMatch_01 =  strCmp(turn_on_green_led, RxBuffer,
 8001050:	2212      	movs	r2, #18
 8001052:	4935      	ldr	r1, [pc, #212]	; (8001128 <USART1_Process+0x1c8>)
 8001054:	4837      	ldr	r0, [pc, #220]	; (8001134 <USART1_Process+0x1d4>)
 8001056:	f7ff fd97 	bl	8000b88 <strCmp>
 800105a:	4603      	mov	r3, r0
 800105c:	713b      	strb	r3, [r7, #4]
            sizeof(turn_on_green_led));

        /* Check return status */
        if(STR_EQUAL == isMatch_01)
 800105e:	793b      	ldrb	r3, [r7, #4]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d104      	bne.n	800106e <USART1_Process+0x10e>
        {
          /* Turn on green led */
          //GPIO_TurnON_LED(EVAL_GREEN_LED);

          /* Transmit data */
          strTransmit(done, sizeof(done));
 8001064:	2105      	movs	r1, #5
 8001066:	4834      	ldr	r0, [pc, #208]	; (8001138 <USART1_Process+0x1d8>)
 8001068:	f7ff fe3a 	bl	8000ce0 <strTransmit>
 800106c:	e006      	b.n	800107c <USART1_Process+0x11c>
        }
        else
        {
          /* Compare with turn on red led command */
          isMatch_02 =  strCmp(turn_on_red_led, RxBuffer,
 800106e:	2210      	movs	r2, #16
 8001070:	492d      	ldr	r1, [pc, #180]	; (8001128 <USART1_Process+0x1c8>)
 8001072:	4832      	ldr	r0, [pc, #200]	; (800113c <USART1_Process+0x1dc>)
 8001074:	f7ff fd88 	bl	8000b88 <strCmp>
 8001078:	4603      	mov	r3, r0
 800107a:	71fb      	strb	r3, [r7, #7]
              sizeof(turn_on_red_led));
        }

        /* Check return status */
        if(STR_EQUAL == isMatch_02)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d104      	bne.n	800108c <USART1_Process+0x12c>
        {
          /* Turn on red led */
          //GPIO_TurnON_LED(EVAL_RED_LED);

          /* Transmit data */
          strTransmit(done, sizeof(done));
 8001082:	2105      	movs	r1, #5
 8001084:	482c      	ldr	r0, [pc, #176]	; (8001138 <USART1_Process+0x1d8>)
 8001086:	f7ff fe2b 	bl	8000ce0 <strTransmit>
 800108a:	e009      	b.n	80010a0 <USART1_Process+0x140>
        }
        else if(STR_NOT_EQUAL == isMatch_01)
 800108c:	793b      	ldrb	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <USART1_Process+0x140>
        {
          /* Compare with turn off green led command */
          isMatch_03 =  strCmp(turn_off_green_led, RxBuffer,
 8001092:	2213      	movs	r2, #19
 8001094:	4924      	ldr	r1, [pc, #144]	; (8001128 <USART1_Process+0x1c8>)
 8001096:	482a      	ldr	r0, [pc, #168]	; (8001140 <USART1_Process+0x1e0>)
 8001098:	f7ff fd76 	bl	8000b88 <strCmp>
 800109c:	4603      	mov	r3, r0
 800109e:	71bb      	strb	r3, [r7, #6]
        {
          /* Do nothing */
        }

        /* Check return status */
        if(STR_EQUAL == isMatch_03)
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d104      	bne.n	80010b0 <USART1_Process+0x150>
        {
          /* Turn off green led */
          //GPIO_TurnOFF_LED(EVAL_GREEN_LED);

          /* Transmit data */
          strTransmit(done, sizeof(done));
 80010a6:	2105      	movs	r1, #5
 80010a8:	4823      	ldr	r0, [pc, #140]	; (8001138 <USART1_Process+0x1d8>)
 80010aa:	f7ff fe19 	bl	8000ce0 <strTransmit>
 80010ae:	e00c      	b.n	80010ca <USART1_Process+0x16a>
        }
        else if((STR_NOT_EQUAL == isMatch_02)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d109      	bne.n	80010ca <USART1_Process+0x16a>
            && (STR_NOT_EQUAL == isMatch_01))
 80010b6:	793b      	ldrb	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <USART1_Process+0x16a>
        {
          /* Compare with turn off red led command */
          isMatch_04 =  strCmp(turn_off_red_led, RxBuffer,
 80010bc:	2211      	movs	r2, #17
 80010be:	491a      	ldr	r1, [pc, #104]	; (8001128 <USART1_Process+0x1c8>)
 80010c0:	4820      	ldr	r0, [pc, #128]	; (8001144 <USART1_Process+0x1e4>)
 80010c2:	f7ff fd61 	bl	8000b88 <strCmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	717b      	strb	r3, [r7, #5]
        {
          /* Do nothing */
        }

        /* Check return status */
        if(STR_EQUAL == isMatch_04)
 80010ca:	797b      	ldrb	r3, [r7, #5]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d104      	bne.n	80010da <USART1_Process+0x17a>
        {
          /* Turn off red led */
         // GPIO_TurnOFF_LED(EVAL_RED_LED);

          /* Transmit data */
          strTransmit(done, sizeof(done));
 80010d0:	2105      	movs	r1, #5
 80010d2:	4819      	ldr	r0, [pc, #100]	; (8001138 <USART1_Process+0x1d8>)
 80010d4:	f7ff fe04 	bl	8000ce0 <strTransmit>
      }
      else
      {
        /* Nothing received yet */
      }
      break;
 80010d8:	e013      	b.n	8001102 <USART1_Process+0x1a2>
        else if((STR_NOT_EQUAL == isMatch_03)
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d110      	bne.n	8001102 <USART1_Process+0x1a2>
            && (STR_NOT_EQUAL == isMatch_02)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10d      	bne.n	8001102 <USART1_Process+0x1a2>
            && (STR_NOT_EQUAL == isMatch_01))
 80010e6:	793b      	ldrb	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10a      	bne.n	8001102 <USART1_Process+0x1a2>
          strTransmit(wrong_command, sizeof(wrong_command));
 80010ec:	210e      	movs	r1, #14
 80010ee:	4816      	ldr	r0, [pc, #88]	; (8001148 <USART1_Process+0x1e8>)
 80010f0:	f7ff fdf6 	bl	8000ce0 <strTransmit>
      break;
 80010f4:	e005      	b.n	8001102 <USART1_Process+0x1a2>

    default:
      break;
 80010f6:	bf00      	nop
 80010f8:	e004      	b.n	8001104 <USART1_Process+0x1a4>
      break;
 80010fa:	bf00      	nop
 80010fc:	e002      	b.n	8001104 <USART1_Process+0x1a4>
      break;
 80010fe:	bf00      	nop
 8001100:	e000      	b.n	8001104 <USART1_Process+0x1a4>
      break;
 8001102:	bf00      	nop
  }
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000035 	.word	0x20000035
 8001110:	080016bc 	.word	0x080016bc
 8001114:	20000034 	.word	0x20000034
 8001118:	080015e4 	.word	0x080015e4
 800111c:	20000101 	.word	0x20000101
 8001120:	080015f4 	.word	0x080015f4
 8001124:	08001608 	.word	0x08001608
 8001128:	20000038 	.word	0x20000038
 800112c:	0800160c 	.word	0x0800160c
 8001130:	08001624 	.word	0x08001624
 8001134:	08001658 	.word	0x08001658
 8001138:	080016a4 	.word	0x080016a4
 800113c:	0800166c 	.word	0x0800166c
 8001140:	0800167c 	.word	0x0800167c
 8001144:	08001690 	.word	0x08001690
 8001148:	080016ac 	.word	0x080016ac

0800114c <main>:
**
**
**===========================================================================
*/
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	SysTick_Init();
 8001150:	f7ff fc48 	bl	80009e4 <SysTick_Init>
    GPIO_OnBoard_Init_LED();
 8001154:	f7ff fc6e 	bl	8000a34 <GPIO_OnBoard_Init_LED>
    NVIC_Init();
 8001158:	f7ff fcfa 	bl	8000b50 <NVIC_Init>
    USART1_Init(Cal_USART_BRR_Val(115200,8000000) );
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <main+0x30>)
 800115e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001162:	f7ff fe21 	bl	8000da8 <Cal_USART_BRR_Val>
 8001166:	4603      	mov	r3, r0
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fe8b 	bl	8000e84 <USART1_Init>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 800116e:	b662      	cpsie	i

    __enable_irq();
    USART_Enable(USART1);
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <main+0x34>)
 8001172:	f7ff fec3 	bl	8000efc <USART_Enable>
 while(1)
 {
	 USART1_Process();
 8001176:	f7ff fef3 	bl	8000f60 <USART1_Process>
 800117a:	e7fc      	b.n	8001176 <main+0x2a>
 800117c:	007a1200 	.word	0x007a1200
 8001180:	40013800 	.word	0x40013800

08001184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001184:	f8df d038 	ldr.w	sp, [pc, #56]	; 80011c0 <LoopFillZerobss+0x16>

  /* Disable interrupt (set PRIMASK) */
  CPSID i
 8001188:	b672      	cpsid	i

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800118a:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800118c:	e003      	b.n	8001196 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <LoopFillZerobss+0x1a>)
	ldr	r3, [r3, r1]
 8001190:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001192:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001194:	3104      	adds	r1, #4

08001196 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <LoopFillZerobss+0x1e>)
	ldr	r3, =_edata
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <LoopFillZerobss+0x22>)
	adds	r2, r0, r1
 800119a:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800119c:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800119e:	d3f6      	bcc.n	800118e <CopyDataInit>
	ldr	r2, =_sbss
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopFillZerobss+0x26>)
	b	LoopFillZerobss
 80011a2:	e002      	b.n	80011aa <LoopFillZerobss>

080011a4 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011a4:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011a6:	f842 3b04 	str.w	r3, [r2], #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <LoopFillZerobss+0x2a>)
	cmp	r2, r3
 80011ac:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011ae:	d3f9      	bcc.n	80011a4 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b0:	f000 f89a 	bl	80012e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b4:	f000 f9a0 	bl	80014f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b8:	f7ff ffc8 	bl	800114c <main>
	bx	lr
 80011bc:	4770      	bx	lr
 80011be:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c0:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80011c4:	080016d4 	.word	0x080016d4
	ldr	r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011cc:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80011d0:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80011d4:	200001d0 	.word	0x200001d0

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>

080011da <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	++SysTickCounter;
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <SysTick_Handler+0x18>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	4a03      	ldr	r2, [pc, #12]	; (800123c <SysTick_Handler+0x18>)
 8001230:	6013      	str	r3, [r2, #0]
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000030 	.word	0x20000030

08001240 <EXTI0_IRQHandler>:
  * @note   None
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

 /* Turn on Yellow LED */
    Yellow_LED_BITBAND = 0;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <EXTI0_IRQHandler+0x30>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]

 /* Wait one second */
    SysTick_Delay(1000);
 800124a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124e:	f7ff fbb3 	bl	80009b8 <SysTick_Delay>

 /* Turn OFF Yellow LED */
    Yellow_LED_BITBAND = 1;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <EXTI0_IRQHandler+0x30>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

 /* Wait one second */
    SysTick_Delay(1000);
 8001258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125c:	f7ff fbac 	bl	80009b8 <SysTick_Delay>

 /* Clear pending bit */
    EXTI->PR |= EXTI_PR_PR0;
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <EXTI0_IRQHandler+0x34>)
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <EXTI0_IRQHandler+0x34>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6153      	str	r3, [r2, #20]
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	422201b4 	.word	0x422201b4
 8001274:	40010400 	.word	0x40010400

08001278 <EXTI1_IRQHandler>:
  * @note   None
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <EXTI2_IRQHandler>:
  * @note   None
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <EXTI3_IRQHandler>:
  * @note   None
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <DMA1_Channel3_IRQHandler>:
  * @param  None
  * @retval None
  */

void DMA1_Channel3_IRQHandler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

	if((DMA1->ISR & DMA_ISR_TCIF3) == DMA_ISR_TCIF3)
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <DMA1_Channel3_IRQHandler+0x38>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ac:	d108      	bne.n	80012c0 <DMA1_Channel3_IRQHandler+0x24>
	{
		/* DMA transfer is complete, turn off Yellow LED */
		Yellow_LED_BITBAND = 1;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <DMA1_Channel3_IRQHandler+0x3c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
	    /* Clear transfer complete flag */
		DMA1->IFCR |= DMA_IFCR_CTCIF3;
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <DMA1_Channel3_IRQHandler+0x38>)
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <DMA1_Channel3_IRQHandler+0x38>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012be:	6053      	str	r3, [r2, #4]
	}

	 /* Clears the GIF, TEIF, HTIF and TCIF flags in the DMA_ISR register */
		DMA1->IFCR |= DMA_IFCR_CGIF3;
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <DMA1_Channel3_IRQHandler+0x38>)
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <DMA1_Channel3_IRQHandler+0x38>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6053      	str	r3, [r2, #4]

}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40020000 	.word	0x40020000
 80012d8:	422201b4 	.word	0x422201b4

080012dc <USART1_IRQHandler>:
  * @brief  This function handles USART1 interrupt request.
  * @param  None
  * @retval None
  */
void USART1_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  USART1_IRQ_Callback();
 80012e0:	f7ff fc7e 	bl	8000be0 <USART1_IRQ_Callback>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012ec:	4a15      	ldr	r2, [pc, #84]	; (8001344 <SystemInit+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <SystemInit+0x5c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80012f8:	4912      	ldr	r1, [pc, #72]	; (8001344 <SystemInit+0x5c>)
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <SystemInit+0x5c>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <SystemInit+0x60>)
 8001300:	4013      	ands	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001304:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <SystemInit+0x5c>)
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <SystemInit+0x5c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800130e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <SystemInit+0x5c>)
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <SystemInit+0x5c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001320:	4a08      	ldr	r2, [pc, #32]	; (8001344 <SystemInit+0x5c>)
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SystemInit+0x5c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800132a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SystemInit+0x5c>)
 800132e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001332:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001334:	f000 f878 	bl	8001428 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <SystemInit+0x64>)
 800133a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	f8ff0000 	.word	0xf8ff0000
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <SystemCoreClockUpdate+0xc4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b04      	cmp	r3, #4
 8001370:	d007      	beq.n	8001382 <SystemCoreClockUpdate+0x32>
 8001372:	2b08      	cmp	r3, #8
 8001374:	d009      	beq.n	800138a <SystemCoreClockUpdate+0x3a>
 8001376:	2b00      	cmp	r3, #0
 8001378:	d133      	bne.n	80013e2 <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <SystemCoreClockUpdate+0xc8>)
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <SystemCoreClockUpdate+0xcc>)
 800137e:	601a      	str	r2, [r3, #0]
      break;
 8001380:	e033      	b.n	80013ea <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <SystemCoreClockUpdate+0xc8>)
 8001384:	4a25      	ldr	r2, [pc, #148]	; (800141c <SystemCoreClockUpdate+0xcc>)
 8001386:	601a      	str	r2, [r3, #0]
      break;
 8001388:	e02f      	b.n	80013ea <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <SystemCoreClockUpdate+0xc4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001392:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <SystemCoreClockUpdate+0xc4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	0c9b      	lsrs	r3, r3, #18
 80013a2:	3302      	adds	r3, #2
 80013a4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d106      	bne.n	80013ba <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <SystemCoreClockUpdate+0xd0>)
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	4a18      	ldr	r2, [pc, #96]	; (8001418 <SystemCoreClockUpdate+0xc8>)
 80013b6:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80013b8:	e017      	b.n	80013ea <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <SystemCoreClockUpdate+0xc4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <SystemCoreClockUpdate+0xd0>)
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <SystemCoreClockUpdate+0xc8>)
 80013d0:	6013      	str	r3, [r2, #0]
      break;
 80013d2:	e00a      	b.n	80013ea <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4a11      	ldr	r2, [pc, #68]	; (800141c <SystemCoreClockUpdate+0xcc>)
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <SystemCoreClockUpdate+0xc8>)
 80013de:	6013      	str	r3, [r2, #0]
      break;
 80013e0:	e003      	b.n	80013ea <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <SystemCoreClockUpdate+0xc8>)
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <SystemCoreClockUpdate+0xcc>)
 80013e6:	601a      	str	r2, [r3, #0]
      break;
 80013e8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <SystemCoreClockUpdate+0xc4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <SystemCoreClockUpdate+0xd4>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <SystemCoreClockUpdate+0xc8>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	fa22 f303 	lsr.w	r3, r2, r3
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <SystemCoreClockUpdate+0xc8>)
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	20000000 	.word	0x20000000
 800141c:	007a1200 	.word	0x007a1200
 8001420:	003d0900 	.word	0x003d0900
 8001424:	20000004 	.word	0x20000004

08001428 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
 800142c:	f000 f802 	bl	8001434 <SetSysClockToHSE>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <SetSysClockToHSE>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockToHSE(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001442:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <SetSysClockToHSE+0xbc>)
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <SetSysClockToHSE+0xbc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <SetSysClockToHSE+0xbc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3301      	adds	r3, #1
 800145c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d103      	bne.n	800146c <SetSysClockToHSE+0x38>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800146a:	d1f0      	bne.n	800144e <SetSysClockToHSE+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <SetSysClockToHSE+0xbc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <SetSysClockToHSE+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001478:	2301      	movs	r3, #1
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	e001      	b.n	8001482 <SetSysClockToHSE+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d12e      	bne.n	80014e6 <SetSysClockToHSE+0xb2>
  {

#if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001488:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <SetSysClockToHSE+0xc0>)
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <SetSysClockToHSE+0xc0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	6013      	str	r3, [r2, #0]

    /* Flash 0 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <SetSysClockToHSE+0xc0>)
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <SetSysClockToHSE+0xc0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	6013      	str	r3, [r2, #0]

#ifndef STM32F10X_CL
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <SetSysClockToHSE+0xc0>)
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <SetSysClockToHSE+0xc0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6013      	str	r3, [r2, #0]
	}
#endif /* STM32F10X_CL */
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80014a8:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	6053      	str	r3, [r2, #4]
    
    /* Select HSE as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
 80014cc:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6053      	str	r3, [r2, #4]

    /* Wait till HSE is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
 80014d8:	bf00      	nop
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SetSysClockToHSE+0xbc>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d1f9      	bne.n	80014da <SetSysClockToHSE+0xa6>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40022000 	.word	0x40022000

080014f8 <__libc_init_array>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	2500      	movs	r5, #0
 80014fc:	4e0c      	ldr	r6, [pc, #48]	; (8001530 <__libc_init_array+0x38>)
 80014fe:	4c0d      	ldr	r4, [pc, #52]	; (8001534 <__libc_init_array+0x3c>)
 8001500:	1ba4      	subs	r4, r4, r6
 8001502:	10a4      	asrs	r4, r4, #2
 8001504:	42a5      	cmp	r5, r4
 8001506:	d109      	bne.n	800151c <__libc_init_array+0x24>
 8001508:	f000 f860 	bl	80015cc <_init>
 800150c:	2500      	movs	r5, #0
 800150e:	4e0a      	ldr	r6, [pc, #40]	; (8001538 <__libc_init_array+0x40>)
 8001510:	4c0a      	ldr	r4, [pc, #40]	; (800153c <__libc_init_array+0x44>)
 8001512:	1ba4      	subs	r4, r4, r6
 8001514:	10a4      	asrs	r4, r4, #2
 8001516:	42a5      	cmp	r5, r4
 8001518:	d105      	bne.n	8001526 <__libc_init_array+0x2e>
 800151a:	bd70      	pop	{r4, r5, r6, pc}
 800151c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001520:	4798      	blx	r3
 8001522:	3501      	adds	r5, #1
 8001524:	e7ee      	b.n	8001504 <__libc_init_array+0xc>
 8001526:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800152a:	4798      	blx	r3
 800152c:	3501      	adds	r5, #1
 800152e:	e7f2      	b.n	8001516 <__libc_init_array+0x1e>
 8001530:	080016cc 	.word	0x080016cc
 8001534:	080016cc 	.word	0x080016cc
 8001538:	080016cc 	.word	0x080016cc
 800153c:	080016d0 	.word	0x080016d0

08001540 <round>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8001546:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800154a:	2c13      	cmp	r4, #19
 800154c:	4606      	mov	r6, r0
 800154e:	460d      	mov	r5, r1
 8001550:	460b      	mov	r3, r1
 8001552:	468e      	mov	lr, r1
 8001554:	dc17      	bgt.n	8001586 <round+0x46>
 8001556:	2c00      	cmp	r4, #0
 8001558:	da09      	bge.n	800156e <round+0x2e>
 800155a:	3401      	adds	r4, #1
 800155c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8001560:	d103      	bne.n	800156a <round+0x2a>
 8001562:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001566:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800156a:	2200      	movs	r2, #0
 800156c:	e029      	b.n	80015c2 <round+0x82>
 800156e:	4916      	ldr	r1, [pc, #88]	; (80015c8 <round+0x88>)
 8001570:	4121      	asrs	r1, r4
 8001572:	420d      	tst	r5, r1
 8001574:	d100      	bne.n	8001578 <round+0x38>
 8001576:	b188      	cbz	r0, 800159c <round+0x5c>
 8001578:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800157c:	4123      	asrs	r3, r4
 800157e:	4473      	add	r3, lr
 8001580:	ea23 0301 	bic.w	r3, r3, r1
 8001584:	e7f1      	b.n	800156a <round+0x2a>
 8001586:	2c33      	cmp	r4, #51	; 0x33
 8001588:	dd0b      	ble.n	80015a2 <round+0x62>
 800158a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800158e:	d105      	bne.n	800159c <round+0x5c>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	f7fe fde0 	bl	8000158 <__adddf3>
 8001598:	4606      	mov	r6, r0
 800159a:	460d      	mov	r5, r1
 800159c:	4630      	mov	r0, r6
 800159e:	4629      	mov	r1, r5
 80015a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015a2:	f04f 30ff 	mov.w	r0, #4294967295
 80015a6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80015aa:	40f8      	lsrs	r0, r7
 80015ac:	4206      	tst	r6, r0
 80015ae:	d0f5      	beq.n	800159c <round+0x5c>
 80015b0:	2101      	movs	r1, #1
 80015b2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80015b6:	40a1      	lsls	r1, r4
 80015b8:	198a      	adds	r2, r1, r6
 80015ba:	bf28      	it	cs
 80015bc:	3301      	addcs	r3, #1
 80015be:	ea22 0200 	bic.w	r2, r2, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4610      	mov	r0, r2
 80015c6:	e7e7      	b.n	8001598 <round+0x58>
 80015c8:	000fffff 	.word	0x000fffff

080015cc <_init>:
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ce:	bf00      	nop
 80015d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d2:	bc08      	pop	{r3}
 80015d4:	469e      	mov	lr, r3
 80015d6:	4770      	bx	lr

080015d8 <_fini>:
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	bf00      	nop
 80015dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015de:	bc08      	pop	{r3}
 80015e0:	469e      	mov	lr, r3
 80015e2:	4770      	bx	lr
